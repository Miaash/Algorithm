function solution(i, j, k) {
    //solution (1) 11, 22와 같이 중복 될 때 count가 안된다.

    let count = 0;
    for(let a = i; a <= j; a++) {
        if(a.toString().split('').includes(k.toString())) count ++;
    }
    return count;
    
    //solution (2) 보완한 솔루션 => 배열에 숫자를 i부터 j까지 string 타입으로 바꿔서 담아준 뒤, k랑 비교할 때는 숫자형으로 변환한 뒤 비교 후 filter 메서드를 통해 참일 경우 filtering되어 배열에 담길 수 있도록 한다. 그 배열의 길이가 count가 되며  최종 누적값이 return 된다.

    let count = 0;
    for (let num = i; num <= j; num++) {
        count += [...('' + num)].filter(n => +n === k).length;
    }
    return count;

    //solution (3) 추가 솔루션 => "string" + number = "stringnumber" 로 되는 문자열에 + 연산자를 쓰면 +는 더 이상 연산자 역할이 아닌 문자열을 연결하는 용도로써 쓰인다. 
    //따라서 자바스크립트의 암묵적 형변환으로 인해 "stringnumber"로 되는 것이다. 
    //이러한 특성으로 아래와 같은 코드를 이해할 수 있다.
    // 1. answer이라는 변수에 빈문자열을 할당하고 이 변수에 누적으로 문자열을 연결한 뒤, k를 기준으로 split메서드를 사용해 나누어 배열에 담는다. 
    // 2. console.log("221322".split(1)) // ['22', '1', '322']
    // 3. 해당 배열의 길이는 찾고자 하는 k의 개수보다 항상 하나씩 많기 때문에 -1을 해준다.

    let answer = ''
    for(let z =i; z<=j;z++){
        answer += z
    }
    return answer.split(k).length -1
}