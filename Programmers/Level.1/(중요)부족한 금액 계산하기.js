// 문제 설명 
// 새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 
// 이 놀이기구의 원래 이용료는 price원 인데, 놀이기구를 N 번째 이용한다면 원래 이용료의 N배를 받기로 하였습니다. 
// 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.
// 놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 return 하도록 solution 함수를 완성하세요.
// 단, 금액이 부족하지 않으면 0을 return 하세요.

// 제한사항
// 놀이기구의 이용료 price : 1 ≤ price ≤ 2,500, price는 자연수
// 처음 가지고 있던 금액 money : 1 ≤ money ≤ 1,000,000,000, money는 자연수
// 놀이기구의 이용 횟수 count : 1 ≤ count ≤ 2,500, count는 자연수

// 입출력 예
// price: 3, money: 20, count: 4, result: 10

// 입출력 예 설명
// 입출력 예 #1
// 이용금액이 3인 놀이기구를 4번 타고 싶은 고객이 현재 가진 금액이 20이라면, 
// 총 필요한 놀이기구의 이용 금액은 30 (= 3+6+9+12) 이 되어 10만큼 부족하므로 10을 return 합니다.

// solution 1) 가우스 공식 사용. 
// 일단 price에서 count만큼 price가 계속해서 더해진 값을 구한 뒤 현재 있는 돈 money에서 뺀 값을 반환하는 문제였다.
// 굳이 반복문을 통해서 더하는게 아니라 가우스 공식을 사용하면 a에서 b까지의 합을 쉽게 구할 수 있다.
// 가우스공식: n(a+b)/2 
function solution(price, money, count) {
    let restMoney = count * (price + (price * count)) / 2 - money;
    return restMoney > 0 ? restMoney : 0;
}
