// 문제설명
// 배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 
// 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 
// 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,
// arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
// arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
// 배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.

// 제한사항
// 배열 arr의 크기 : 1,000,000 이하의 자연수
// 배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수

// 입출력 예
// arr: [1,1,3,3,0,1,1], answer: [1,3,0,1]
// arr: [4,4,4,3,3], answer: [4,3]

// solution 1) for문 활용.
function solution(arr) {
  let result = [];
  for(let i = 0; i < arr.length; i++) {
    if(arr[i] !== arr[i+1]) result.push(arr[i]);
  }
  return result;
}
// 정확성 테스트
// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.05ms, 33MB)
// 테스트 3 〉	통과 (0.05ms, 33.4MB)
// 테스트 4 〉	통과 (0.05ms, 32.8MB)
// 테스트 5 〉	통과 (0.06ms, 33.5MB)

// 효율성 테스트
// 테스트 1 〉	통과 (12.27ms, 82.9MB)
// 테스트 2 〉	통과 (34.55ms, 83MB)
// 테스트 3 〉	통과 (35.57ms, 82.9MB)
// 테스트 4 〉	통과 (34.83ms, 83MB)


// solution 2) arr.filter메서드 활용.
function solution(arr) {
  return arr.filter((el, idx) => el !== arr[idx+1]);
}

// 정확성 테스트
// 테스트 1 〉	통과 (0.06ms, 33.6MB)
// 테스트 2 〉	통과 (0.08ms, 33.4MB)
// 테스트 3 〉	통과 (0.09ms, 33.4MB)
// 테스트 4 〉	통과 (0.08ms, 33.6MB)
// 테스트 5 〉	통과 (0.05ms, 33.5MB)

// 효율성 테스트
// 테스트 1 〉	통과 (24.50ms, 82.1MB)
// 테스트 2 〉	통과 (24.59ms, 82.2MB)
// 테스트 3 〉	통과 (48.51ms, 81.8MB)
// 테스트 4 〉	통과 (24.59ms, 83.3MB)

// solution 1과 2 모두 반복문을 쓸 수 밖에 없는데, 
// 어느 코드가 더 간결하고 가독성이 좋으냐의 문제 아닐까?




