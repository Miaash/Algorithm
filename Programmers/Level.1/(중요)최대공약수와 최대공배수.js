// 문제설명
// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 
// 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

// 제한사항
// 두 수는 1이상 1000000이하의 자연수입니다.

// 입출력
// n = 3, m = 12, return [3, 12]
// n = 2, m = 5, return [1, 10]

// solution 1) 유클리스 호제법 사용.
// 1. 두 수 중에서 큰 수를 작은 수로 나눈다.
// 2. 만약 나누고 난 나머지가 0 이라면 작은 수가 최대공약수이다.
// 3. 만약 나머지가 0 이 아니라면, 작은 수를 다시 나머지로 나눈다.
// 이를 반복해서 나머지가 0 이 될 때, 그 수가 바로 두 수의 최대공약수이다.
// 최소공배수는 주어진 두 값을 곱하고 최대공약수로 나눈 값이다. 
function solution(n, m) {
  // (1) 최대공약수(GCD) 구하기 (a>b)
  const gcd = (a,b) => a % b === 0 ? b : gcd(b, a % b);
  // (2) 최소공배수(LCM) 구하기 (a>b)
  const lcm = (a,b) => a * b / gcd(a,b);

  return [gcd(m,n), lcm(m,n)]
}

// 테스트 1 〉	통과 (0.08ms, 33.4MB)
// 테스트 2 〉	통과 (0.06ms, 33.4MB)
// 테스트 3 〉	통과 (0.08ms, 33.4MB)
// 테스트 4 〉	통과 (0.06ms, 33.4MB)
// 테스트 5 〉	통과 (0.05ms, 33.5MB)
